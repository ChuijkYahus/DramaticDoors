plugins {
    id 'java-library'
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.neoforged.gradle.userdev' version '7.+'
    // id 'net.neoforged.gradle.mixin'
}

archivesBaseName = "neoforge" // "${rootProject.archives_base_name}-${project.name}"

repositories {
	maven { 
	    url "https://cursemaven.com"
        content { includeGroup "curse.maven" }
	}
    maven {
        name = 'tterrag maven'
        url = 'https://maven.tterrag.com/'
    }
}

// mixin {
    // Only uncomment if you need to generate the refmap. Remember to edit the refmap for the merged JAR file!
    // if (!file('src/main/resources/${rootProject.mod_id}_forge.refmap.json').exists()) {
    //    add(sourceSets.main, "${rootProject.mod_id}_forge.refmap.json")
    // }
// }

minecraft.accessTransformers.file project(":common").file('src/main/resources/META-INF/accesstransformer.cfg')

runs {
    configureEach {
        systemProperty 'forge.logging.markers', 'REGISTRIES'
        systemProperty 'forge.logging.console.level', 'debug'

        modSource project.sourceSets.main
    }
	
	client {
		systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
		programArgument "-mixin.config=" + "dramaticdoors.mixins.json"
	}
	server {
		systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
		programArgument "-mixin.config=" + "dramaticdoors.mixins.json" + " --nogui"
	}
	data {
		programArguments.addAll '--mod', project.mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
	}
}

sourceSets.main.resources.srcDir 'src/generated/resources'

processResources {
    from project(":common").sourceSets.main.resources
}

dependencies {
    implementation("net.neoforged:neoforge:${project.neoforge_version}")
    compileOnly project(":common")
	annotationProcessor("org.spongepowered:mixin:0.8.5-SNAPSHOT:processor")
	implementation("curse.maven:macaws-doors-378646:4649910")
    // implementation("com.simibubi.create:create-${project.minecraft_version}:${project.create_version}:slim") { transitive = false }
    // implementation("com.jozufozu.flywheel:flywheel-forge-${project.minecraft_version}:${project.flywheel_version}")
    // implementation("com.tterrag.registrate:Registrate:${project.registrate_version}")
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId base.archivesName.get()
            from components.java
        }
    }
    repositories {
        maven {
            url "file://" + System.getenv("local_maven")
        }
    }
}