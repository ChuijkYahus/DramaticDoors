plugins {
    id "com.github.johnrengelman.shadow" version "8.1.1"
}

archivesBaseName = "forge" // "${rootProject.archives_base_name}-${project.name}"

architectury {
    platformSetupLoomIde()
    forge()
}

loom {
    accessWidenerPath.set(project(":common").file("src/main/resources/dramaticdoors.accesswidener"))

    forge {
        mixinConfig "dramaticdoors_forge.mixins.json"
        // mixinConfig "dramaticdoors.mixins.json"
        convertAccessWideners.set(true)
    }
	mixin {
	    defaultRefmapName = "dramaticdoors_forge.refmap.json"
	}
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common
}

repositories {
	maven { 
	    url "https://cursemaven.com"
        content { includeGroup "curse.maven" }
	}
}

dependencies {
    forge "net.minecraftforge:forge:${rootProject.minecraft_version}-${rootProject.forge_version}"
    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionForge")) { transitive = false }
	implementation "curse.maven:macaws-doors-378646:4649906"
}

processResources {
    inputs.property "version", rootProject.mod_version

    filesMatching("META-INF/mods.toml") {
        expand "version": rootProject.mod_version
    }
}

shadowJar {
    exclude "fabric.mod.json"

    configurations = [project.configurations.shadowCommon]
    archiveClassifier.set("dev-shadow")
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    archiveClassifier.set(null)
}

jar {
    archiveClassifier.set("dev")
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}" }
    }

    // add some additional metadata to the jar manifest
    manifest {
        attributes([
                "Specification-Title"     : rootProject.mod_id,
                "Specification-Vendor"    : rootProject.mod_authors,
                "Specification-Version"   : "3",
                "Implementation-Title"    : rootProject.mod_name,
                "Implementation-Version"  : rootProject.mod_version,
                "Implementation-Vendor"   : rootProject.mod_authors,
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenForge(MavenPublication) {
            artifactId = rootProject.archives_base_name + "-" + project.name
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
    }
}

tasks.withType(Jar).configureEach {
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
}